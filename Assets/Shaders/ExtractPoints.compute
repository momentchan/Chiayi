#pragma kernel ExtractUV

Texture2D<float4> _Tex;   
int2  _Size;              
float _Epsilon;
bool _UsePerceptualBrightness;           

AppendStructuredBuffer<float2> _OutUV;     

// Calculate perceptual brightness using luminance formula
inline float CalculateBrightness(float3 rgb)
{
    // ITU-R BT.709 luma coefficients for perceptual brightness
    return dot(rgb, float3(0.2126, 0.7152, 0.0722));
}

// Alternative: Calculate maximum RGB brightness
inline float CalculateMaxBrightness(float3 rgb)
{
    return max(rgb.r, max(rgb.g, rgb.b));
}

inline bool IsBrightEnough(float3 rgb, float threshold, bool usePerceptual)
{
    float brightness = usePerceptual ? CalculateBrightness(rgb) : CalculateMaxBrightness(rgb);
    return brightness > threshold;
}

inline float3 FetchRGB(uint2 pix)
{
    float4 rgba = _Tex.Load(int3(pix, 0));
    return rgba.rgb;
}

[numthreads(8, 8, 1)]
void ExtractUV(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)_Size.x || id.y >= (uint)_Size.y) return;

    uint2 pix = id.xy;
    float2 uv  = (float2(pix) + 0.5) / float2(_Size);
    float3 rgb = FetchRGB(pix);

    if (IsBrightEnough(rgb, _Epsilon, _UsePerceptualBrightness))
    {
        _OutUV.Append(uv);
    }
}
